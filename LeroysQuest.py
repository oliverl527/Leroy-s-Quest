import reimport osclass LeroysQuest:    places = inventory = None    def __init__(self):        self.inventory = [            item("objective", "Objective\nGet off the Island", 1, True)        ]        self.places = [environment("heaven's peak"), environment("mermaid cove"), environment("the red chasm"),                       environment("leroy's tower"), environment("treasureland"), environment("braids"),                       environment("falcon keep"), environment("wish well")                       ]    #Define env        self.inventory[0].fixed_loc_desc = "Why would you drop this?!"        #   Items        rope = item("rope", "You could probably use this to climb a mountain.", 1, False)        rope.setFixedLoc(lambda: loc == self.places[2])        rope.addExtraCom(Command("climb mountain", lambda: loc == self.places[1] and rope in self.inventory,                                 lambda: action(self.places[1], "southeast", ["southeast"]), "You climbed the mountain."))        rope.addExtraCom(Command("use rope", lambda: (loc == self.places[1] and rope in self.inventory),                                 lambda: action(self.places[1], "southeast", ["southeast"]), "You climbed the mountain."))        rope.fixed_loc_desc = "You cannot drop the rope now! It will be incinerated."        eminta = item("suit", "It looks like a dust suit with a mask. It is heavy around your body. However, with "                              "the SUIT on, you cannot be hurt by The Red Chasm's Fire.", 1, True)        eminta.addExtraCom(Command("use suit", lambda: eminta in self.inventory, None, "You're using it already!"))        eminta.fixed_loc_desc = "You can't take this off by yourself. It's too difficult."        eminta.addExtraCom(Command("look pit", lambda: loc == self.places[2], None,                                   "The pit is blazing brightly. You can't even look at it directly without blinding yourself."))        eminta.addExtraCom(Command("go pit", lambda: loc == self.places[2], None,                                   "It hurts to take another step closer, so you don't."))        eminta.addExtraCom(Command("go to pit", lambda: loc == self.places[2], None,                                   "It hurts to take another step closer, so you don't."))        eminta.addExtraCom(Command("go to the pit", lambda: loc == self.places[2], None,                                   "It hurts to take another step closer, so you don't."))        ember = item("ember", "It will glow for centuries.", 1, True)        ember.setFixedLoc(lambda: (eminta not in self.inventory) or loc != self.places[2])        ember.addExtraCom(Command("use ember", lambda: loc == self.places[0] and self.places[0].npc,                                  lambda: action(self.places[0], "give ember", ["give", "ember"]), "You gave Herbert the ember."))        teddyBear = item("bear", "This teddy bear looks like a child deeply loved it.", 1, False)        teddyBear.setFixedLoc(lambda: False)        teddyBear.addExtraCom(Command("use bear", lambda: loc == self.places[3] and teddyBear in self.inventory,                                      lambda: action(self.places[3], "give bear", ["give", "bear"]), "You gave the bear to Zoey."))        drawing = item("drawing", "It looks like she tried to draw someone. It also looks like she drew it on "                                  "recyclable paper because on the back appears to be directions to finding Leroy's "                                  "lost key.", 1, False)        drawing.addExtraCom(Command("read", lambda: True, None,                                    "Directions\nTo find the key one must piece together the lost anthem of "                                    "Treasureland. Only with this paper can you see the pieces of the anthem. Look for"                                    " them in Treasureland, Braids, "                                    "Heaven's Peak, and Wish Well. Get them to Treasureland along with a shell blessed "                                    "by a mermaid, the key shall appear before you."))        drawing.addExtraCom(Command("use drawing", lambda: drawing in self.inventory, lambda: action(loc, "read", ["read"]),                                    "You try to read the drawing."))        tower = item("tower", "Leroy's tower is a magnificent one. There's something odd about the top of the pyramid.",                     1, True)        tower.fixed_loc_desc = "Nice try."        tower.addExtraCom(Command("look top", lambda: True, None,                                  "Squinting, you see there's something similar to a fire-pit at the top of the tower."                                  "You can't tell if Herbert lit it yet."))        tower.addExtraCom(Command("climb tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go into tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go to tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go in to tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go into the tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go to the tower", lambda: True, None, "The GUARDS stop you."))        tower.addExtraCom(Command("go in to the tower", lambda: True, None, "The GUARDS stop you."))        anthem1 = item("anthem 1","Anthem 1:\nTreasureland is the place to be.", 1, lambda: drawing not in self.inventory)        anthem1.setVisible(lambda: drawing in self.inventory)        anthem1.addExtraCom(Command("use anthem 1", lambda: anthem1 in self.inventory, lambda:        action(loc, "look anthem 1", ["look", "anthem", "1"]), "You try to look at ANTHEM 1."))        anthem2 = item("anthem 2","Anthem 2:\nTreasureland, where the acorns are free.", 1, lambda: drawing not in self.inventory)        anthem2.setVisible(lambda: drawing in self.inventory)        anthem2.addExtraCom(Command("use anthem 2", lambda: anthem2 in self.inventory, lambda:        action(loc, "look anthem 2", ["look", "anthem", "2"]), "You try to look at ANTHEM 2."))        anthem3 = item("anthem 3","Anthem 3:\nTreasureland is for you and me and", 1, lambda: drawing not in self.inventory)        anthem3.setVisible(lambda: drawing in self.inventory)        anthem3.addExtraCom(Command("use anthem 3", lambda: anthem3 in self.inventory, lambda:        action(loc, "look anthem 3", ["look", "anthem", "3"]), "You try to look at ANTHEM 3."))        anthem4 = item("anthem 4","Anthem 4:\nall the fuzzy creatures in the world.", 1, lambda: drawing not in self.inventory)        anthem4.setVisible(lambda: drawing in self.inventory)        anthem4.addExtraCom(Command("use anthem 4", lambda: anthem4 in self.inventory, lambda:        action(loc, "look anthem 4", ["look", "anthem", "4"]), "You try to look at ANTHEM 4."))        berries = item("berries", "There is assortment of wild berries.", 1, False)        berries.setFixedLoc(lambda: loc == self.places[2])        berries.addExtraCom(Command("use berries", lambda: loc == self.places[3] and berries in self.inventory,                                    lambda: action(self.places[3], "give berries", ["give", "berries"]),                                    "You gave the BERRIES to the GUARDS."))        berries.fixed_loc_desc = "Drop the berries in here??"        shell = item("shell", "The shell is shimmering. It must be blessed.", 1, False)        shell.setFixedLoc(lambda: drawing not in self.inventory)        shell.setVisible(lambda: drawing in self.inventory)        shell.addExtraCom(Command("use shell", lambda: shell in self.inventory, lambda:        action(loc, "look shell", ["look", "shell"]), "You try to look at the SHELL."))        treasure = item("treasure", "This treasure is so valuable it cannot be described.", 1, False)        treasure.setVisible(lambda: key in self.inventory and key.extraVar is True)        treasure.addExtraCom(Command("use treasure", lambda: loc == self.places[5] and treasure in self.inventory,                                     lambda: action(self.places[5], "give treasure", ["give", "treasure"]),                                     "You gave the TREASURE to the CAPTAIN."))        key = item("key", "The key knob is a carved falcon's head.", 1, False)        key.setVisible(lambda: (shell in self.inventory) and (anthem1 in self.inventory) and (anthem2 in self.inventory)                               and (anthem3 in self.inventory) and (anthem4 in self.inventory))        key.set_extra_Var(False)        key.addExtraCom(Command("unlock",                                lambda: loc == self.places[6] and key in self.inventory and treasure in                                        self.places[6].inventory and key.extraVar is False,                                lambda: key.set_extra_Var(True), "The lock on the headstone unlocks with a click."))        key.addExtraCom(Command("use key",                                lambda: loc == self.places[6] and key in self.inventory and treasure in                                        self.places[6].inventory and key.extraVar is False,                                lambda: action(self.places[6], "unlock headstone", ["unlock", "headstone"]),                                "You try to use the KEY to unlock the headstone."))        headstone = item("headstone",                         "The headstone looks untouched. As if something is keeping it preserved.", 1, True)        headstone.fixed_loc_desc = "No."        well = item("well", "It's an old dusty well. It doesn't work anymore. You can't figure out why.", 1, True)        well.fixed_loc_desc = "Quite the ambitious spirit aren't we?"        well.addExtraCom(Command("go well", lambda: True, None,                                 "It's an old dusty well. It doesn't work anymore. You can't figure out why."))        well.addExtraCom(Command("go to the well", lambda: True, None,                                 "It's an old dusty well. It doesn't work anymore. You can't figure out why."))        well.addExtraCom(Command("go to well", lambda: True, None,                                 "It's an old dusty well. It doesn't work anymore. You can't figure out why."))        well.addExtraCom(Command("go the well", lambda: True, None,                                 "It's an old dusty well. It doesn't work anymore. You can't figure out why."))        #   NPCS        npc1 = Npc("herbert", "Herbert is a middle-aged burly man with short dark brown hair and a long well trimmed "                              "beard and a pencil line mustache. He looks cool in his all leather outfit and fedora "                              "and sunglasses.")        npc1.updateTalk("accept", "Thank you. I will give you a SUIT to wear. It will let you walk through The Red "                                  "Chasms. It has a pocket where you can put a single ember.")        npc1.updateTalk("prompt", "Hello, I was wondering if you can accept a quest for me? I need an ember from the "                                  "Red Chasm. I will give you something that will let you walk through it without "                                  "burning up. I will need it back of course. I need it to light Leroy's Tower. So "                                  "will you do it?")        npc1.updateTalk("in progress", "Did you forget where the EMBER is? It's in the Red Chasm. Give me the EMBER\n"                                       "when you have it in your inventory.")        npc1.setGivenObj(eminta)        npc1.setWinGive(teddyBear)        npc1.setKeyObj(ember)        npc1.setWinTake(eminta)        npc1.setWinAct(lambda: self.places[0].removeNPC(npc1))        npc1.setVis(lambda: True)        npc1.updateTalk("win", "Thanks. I will take the SUIT from you. In return, I will give you this stuffed BEAR I "                               "found. Maybe if you find its owner you'll get something worth your while.")        npc1.addExtraCom(Command("get herbert", lambda: self.places[0].npc and self.places[0].npc[0] == npc1, None,                                 "You try to pick him up but he doesn't budge.\nHERBERT: Are you trying to hug me?"))        npc1.addExtraCom(Command("use herbert", lambda: self.places[0].npc and self.places[0].npc[0] == npc1, None,                                 "HERBERT: Excuse me? Herbert is used by no one."))        npc1.addExtraCom(Command("who is herbert", lambda: self.places[0].npc and self.places[0].npc[0] == npc1,                                 lambda: action(self.places[0], "look herbert", ["look", "herbert"]),                                 "HERBERT: Did you just ask who I am???"))        npc2 = Npc("herbert", "Herbert is a middle-aged burly man with short dark brown hair and a long well trimmed "                              "beard and a pencil line mustache. He looks cool in his all leather outfit and fedora "                              "and sunglasses.")        bGuards = Npc("guards", "Unlike the other guards, the GUARDS guarding the path to Braids look worn down.")        bGuards.updateTalk("prompt", "No one is allowed to Braids without permission given by the sea captain last "                                     "week. However, we are hungry because the other guards ate all our breakfast. If"                                     " you get some berries in Treasureland, we might make an exception to let you "                                     "through. What do you say?")        bGuards.updateTalk("accept", "Then hurry up and get the berries.")        bGuards.setKeyObj(berries)        bGuards.setWinTake(berries)        bGuards.setWinAct(lambda: self.places[5].setBlock(False))        bGuards.updateTalk("in progress", "Hurry up and get the BERRIES from Treasureland before we change our minds.")        bGuards.updateTalk("win", "Thanks for the berries. You may pass.")        npc2.setVis(lambda: not self.places[0].npc)        child = Npc("zoey", "Zoey is a small child who looks like she is on the verge of crying.")        child.setVis(lambda: True)        child.updateTalk("prompt", "*sniffle* I can't find my teddy bear. I had it when I went to Heaven's peak. Will "                                   "you help me find it?")        child.updateTalk("accept", "Thank you. I'll look here and you can look in Heaven's Peak. I'm not allowed to go "                                   "there alone.")        child.updateTalk("deny", "*sniffle* Okay.")        child.updateTalk("win", "You found it! Thank you! I drew this today. I want you to have it.\n\nOn the back of "                                "the paper there appears to be directions for something. Maybe you should try to READ "                                "them.")        child.win_act = lambda: self.places[3].removeNPC(child)        child.setWinGive(drawing)        child.setWinTake(teddyBear)        child.setKeyObj(teddyBear)        seaCaptian = Npc("captain", "The captain has a long black curly beard and a sailor's hat.")        seaCaptian.updateTalk("prompt", "Ah so you need a ride back to the mainland? Well you're going to have to give "                                        "me something worth my time. How about Leroy's lost treasure? Give me that and"                                        "I'll take you home. What do you say?")        seaCaptian.updateTalk("accept", "Great. Good luck my friend. The key isn't easy to find. Only family that has"                                        "come close is Zoey's. They said they had it written down somewhere. After "                                        "finding the key, all that's left is to unlock the TREASURE at Falcon's Keep."                                        " Bring that back and you have a ride home. Better hurry though. I'm about"                                        " to set sail.")        seaCaptian.updateTalk("deny", "Good luck getting home. All the other captains have set sail already.")        seaCaptian.updateTalk("in progress", "Great. Good luck my friend. The key isn't easy to find. Only family that "                                             "has come close is Zoey's. They said they had it written down somewhere."                                             " After finding the key, all that's left is to unlock the TREASURE at "                                             "Falcon's Keep. Bring that back and you have a ride home. Better hurry "                                             "though. I'm about to set sail.")        seaCaptian.updateTalk("win", "Ah, the lost treasure. Hop on board my friend. The ship will be departing soon.\n\n"                                     "As the boat sails away, you see Leroy standing on the dock. With a big grin he"                                     " waves goodbye to you and then disappears.")        seaCaptian.setKeyObj(treasure)        seaCaptian.setWinAct(lambda: exit())        #   Environment        self.places[0].updateLook("description", "You are surrounded by clouds, as if you are standing on clouds. To "                                                 "the northwest, you see Mermaid Cove. To the south you see the never"                                                 " ending fire from The Red Chasm. To the southeast you see Leroy's "                                                 "Tower.")        self.places[0].addLook("south", "You see the fires of The Red Chasm. Smoke fills the south sky and the fires "                                        "below burn bright orange.")        self.places[0].updateLook("down", "It clouds swirl around your feet.")        self.places[0].updateLook("default", "You see nothing but the vast emptiness of the clouds.")        self.places[0].addLook("southeast", "You see the infamous Leroy's Tower. However, you don't remember why "                                            "it's infamous.")        self.places[0].set_block_desc("It's too tough to climb up the mountain by yourself. Maybe if you had some rope "                                      "you could do it.")        self.places[0].addLook("northwest", "Mermaid Cove shimmers in the distance.")        self.places[0].addNpc(npc1)        self.places[0].set_alias("peak")        self.places[0].addDirections("south", self.places[2])        self.places[0].setBlock(lambda: not(rope in self.inventory) and loc == self.places[1])        self.places[0].addDirections("northwest", self.places[1])        self.places[0].addDirections("southeast", self.places[3])        self.places[0].inventory.append(anthem1)        self.places[1].inventory.append(shell)        self.places[1].set_alias("cove")        self.places[1].inventory.append(rope)        self.places[1].updateLook("default", "The cove water shimmers in the sunlight. Your boat is shattered on the "                                             "ground.")        self.places[1].updateLook("description", "The cove stretches from all directions, except southeast, where a "                                                 "mountain stands intimidatingly at you.")        self.places[1].addLook("southeast", "The mountain is very tall. Maybe there is some rope on the ground.")        self.places[1].updateLook("down", "Your boat is shattered to pieces on the ground.")        self.places[1].addDirections("southeast", self.places[0])        self.places[1].setBlock(lambda: rope not in self.inventory)        self.places[1].set_block_desc("You should probably grab the rope before going back. Otherwise, you will be"                                      " stuck down there.")        self.places[2].set_alias("chasm")        self.places[2].inventory.append(ember)        self.places[2].addDirections("north", self.places[0])        self.places[2].set_block_desc("The fire here is too hot. You will need something to buffer the heat before "                                      "entering.")        self.places[2].updateLook("description", "It is hot here. So hot. It's almost painful to walk. It's clear that "                                                 "Herbert did not want to endure the heat. To the north, you see a "                                                 "pathway leading back to heaven's peak. To the south you see The "                                                 "Red Chasm's fiery pit. It is too painful to take another step closer "                                                 "to the pit.")        self.places[2].setBlock(lambda: eminta not in self.inventory)        self.places[2].updateLook("default", "There is fire everywhere and smoke fills the sky.")        self.places[2].updateLook("up", "Smoke fills the sky.")        self.places[2].updateLook("down", "The ground is scorched or being scorched. Embers are scattered across the "                                          "ground.")        self.places[2].addLook("north", "The trail to Heaven's peak extends into the mountain. The mountain stands "                                        "tall above the flames.")        self.places[3].set_alias("tower")        self.places[3].updateLook("description", "In the center of the hustle and bustle of the market, Leroy's tower "                                                 "is a giant pyramid with a seemingly never ending staircase that leads"                                                 " up to the top. There appears to be people guarding the bottom of the"                                                 " stair case. Some guards are also patrolling the southeast exit, "                                                 "which is the path to Braids. To the northwest, you see Heaven's Peak"                                                 ", To the northeast, you see the path to Treasureland, a forest on "                                                 "the island.")        self.places[3].addDirections("northwest", self.places[0])        self.places[3].addLook("northwest", "Heaven's peak stretches to the sky.")        self.places[3].addLook("northeast", "You stare into the deciduous trees in Treasureland's forest.")        self.places[3].addLook("southwest", "The Red Chasm's fire burns brightly. However, it is impossible to get "                                            "there from here because there is no path.")        self.places[3].addLook("southeast", "Guards are patrolling the gates pretty meticulously. It looks like it will"                                            "be hard to get to Braids from here.")        self.places[3].updateLook("default", "You see the hustle and bustle of the market.")        self.places[3].addNpc(child)        self.places[3].addDirections("northeast", self.places[4])        self.places[3].inventory.append(tower)        self.places[3].npc.append(bGuards)        self.places[3].addDirections("southeast", self.places[5])        self.places[4].inventory.append(anthem2)        self.places[4].set_alias("forest")        self.places[4].inventory.append(key)        self.places[4].updateLook("default", "You stare into the trees. The forest is teaming with life.")        self.places[4].updateLook("description", "Animals are busy getting food, the birds are singing, the forest is "                                                 "teaming with life. To the southwest, you see the trail that leads"                                                 "back to Leroy's Tower.")        self.places[4].addLook("southwest", "You see the trail that leads back to Leroy's Tower.")        self.places[4].updateLook("down", "The ground is covered with leaves, dirt, and lots and lots of acorns.")        self.places[4].updateLook("up", "You see the blue sky peaking behind the leaves of the tree tops. You see"                                        "birds chirping and fluttering about.")        self.places[4].addDirections("southwest", self.places[3])        self.places[4].inventory.append(berries)        self.places[5].inventory.append(anthem3)        self.places[5].set_alias("braids")        self.places[5].blocked_desc = "GUARDS: No one shall pass without permission."        self.places[5].blocked = True        self.places[5].updateLook("description", "The buildings are made out of adobe bricks and shaped like a "                                                 "cucumber. The inside is filled with glowing algae. Leroy's tower is "                                                 "to the northwest, To the southwest is Falcon's Keep, and to the West"                                                 " is the Wish Well.")        self.places[5].updateLook("default", "You see the algae on top of people's houses. They have a weird way of "                                             "showing their elitism. The higher the algae is from the top of the house,"                                             " the more elite the household is.")        self.places[5].addLook("southwest", "You see Falcon's Keep, which looks like a mini hinged grave.")        self.places[5].addLook("west", "The Wish Well trail is a long one.")        self.places[5].addLook("northwest", "To the northeast Leroy's Tower in the distance.")        self.places[5].addDirections("northeast", self.places[3])        self.places[5].addDirections("west", self.places[7])        self.places[5].addNpc(seaCaptian)        self.places[5].addDirections("southwest", self.places[6])        self.places[6].addDirections("northeast", self.places[5])        self.places[6].set_alias("keep")        self.places[6].updateLook("description", "There is a headstone that looks like a grave but there's hinges on "                                                 "the left side and a small keyhole. The shore is all across the south"                                                 " boarder. Rocks walls line all other sides except northeast."                                                 " Braids is to the northeast.")        self.places[6].inventory.append(headstone)        self.places[6].updateLook("default", "The sea glistens off the shore.")        self.places[6].updateLook("northeast", "You see the Trail that led to Braids.")        self.places[6].updateLook("northwest", "The rocks are tall and jagged. it would be too dangerous to climb.")        self.places[6].updateLook("north", "The rocks are tall and jagged. it would be too dangerous to climb.")        self.places[6].updateLook("down", "The sand looks and feels warm and soft.")        self.places[6].inventory.append(treasure)        self.places[7].inventory.append(anthem4)        self.places[7].set_alias("well")        self.places[7].inventory.append(well)        self.places[7].addLook("east", "You see Braids in the distance.")        self.places[7].updateLook("default", "You see the sea crashing upon the shore.")        self.places[7].updateLook("down", "The sand is soft and warm.")        self.places[7].updateLook("description", "There isn't much here. There is an old well that no longer works. Braids"                                                 " is to the east.")        self.places[7].addDirections("east", self.places[5])class environment:    alias = None    directions = {}    look = {}    name = ""    visited = False    blocked = False    blocked_desc = ""    inventory = []    npc = []    def __init__(self, name= ""):        self.name = name        self.directions = {}        self.look = {            "description": "No description given.",            "up": "The sky is a clear blue. It reminds you of home.",            "down": "You see the ground.",            "default": "No description given."        }        self.visited = False        self.blocked = False        self.blocked_desc = "You cannot go there."        self.alias = {}        self.inventory = []        self.npc = []    def addNpc(self, exp):        self.npc.append(exp)    def set_inv(self, ls):        self.inventory = ls    def set_alias(self, dic):        self.alias = dic    def set_block_desc(self, s):        self.blocked_desc = s    def setBlock(self, b):        self.blocked= b    def setVisited(self, b):        self.visited = b    def removeNPC(self, obj):        self.npc.remove(obj)    def updateLook(self, lookKey, description):        self.look.update({lookKey: description})    def addLook(self, lookKey, description):        self.look[lookKey] = description    def addDirections(self, directionKey, environmentLink):        self.directions[directionKey] = environmentLink    def updateDirections(self, directionKey, environmentLink):        self.directions.update({directionKey: environmentLink})    def getName(self):        return self.nameclass item:    name = description = ""    quantity = 1    extra_commands = []    fixed_loc = True    fixed_loc_desc = ""    extraVar = None    visible = lambda: True    def __init__(self, n, d, q, fixed):        self.name = n        self.description = d        self.quantity = q        self.extra_commands = []        self.fixed_loc = fixed        self.fixed_loc_desc = "You cannot move this item."        self.extraVar = None        self.visible = True    def setVisible(self, exp):        self.visible = exp    def addExtraCom(self, exp):        self.extra_commands.append(exp)    def set_extra_Var(self, exp):        self.extraVar = exp    def setFixedLoc(self, exp):        self.fixed_loc = exp    def setExtraComm(self, exp):        self.extra_commands = expclass Command:    name = ""    requirements = None    action = None    description = ""    requirement_fail_desc = ""    def __init__(self, n, req, act, desc):        self.name = n        self.requirements = req        self.action = act        self.description = desc        self.requirement_fail_desc = "You can't do that yet."    def setAction(self, atr):        self.action = atrclass Npc:    talk = {}    name = ""    given_obj = None    status = "prompt"    win_give = None    keyObj = None    win_take = None    description = ""    visible = True    extra_commands = []    def __init__(self, n, d):        self.name = n        self.description = d        self.talk = {            "prompt": "Not Created Yet",            "accept": "Thank you!",            "deny": "I'm sorry to hear that. Come back when you are ready.",            "in progress": "Thank you for accepting this quest.",            "win": "Good job. Your task is completed.",            "wrong key": "I don't want this."        }        self.given_obj = None        self.keyObj = None        self.status = "prompt"        self.win_give = None        self.win_take = None        self.win_act = None        self.visible = True        self.extra_commands = []    def addExtraCom(self, exp):        self.extra_commands.append(exp)    def setWinGive(self, exp):        self.win_give = exp    def setVis(self, exp):        self.visible = exp    def setWinAct(self, exp):        self.win_act = exp    def setWinTake(self, exp):        self.win_take = exp    def setGivenObj(self, exp):        self.given_obj = exp    def setKeyObj(self, exp):        self.keyObj = exp    def setComp(self, exp):        self.completed = exp    def updateTalk(self, keyTalk, desc):        self.talk.update({keyTalk: desc})    def addTalk(self, keyTalk, desc):        self.t[keyTalk] = desc    def question(self):        if self.status == "in progress":            print("\n" + self.name.upper() + ": " + self.talk.get("in progress"))        elif self.status == "prompt":            print("\n" + self.name.upper() + ": " +self.talk.get("prompt"))            ans = input(">")            if ans == 'no':                print("\n" + self.name.upper() + ": " + self.talk["deny"])            elif ans == 'yes':                ta.inventory[0].description = ta.inventory[0].description + "\nGive " + self.name.upper() + " the " + \                                              self.keyObj.name.upper()                print("\n" + self.name.upper() + ": " + self.talk["accept"])                self.status = "in progress"                if self.given_obj:                    ta.inventory.append(self.given_obj)                    self.given_obj = None            else:                print("\n" + self.name.upper() + ": " + " Sorry I didn't understand you. Talk to me again and respond "                                                        "with yes or no.")        elif self.status == "completed":            print("\n" + self.name.upper() + ": " + self.talk["win"])    def checkWinKey(self, questObj):        if self.status == "in progress" and questObj and self.keyObj and questObj == self.keyObj:            ta.inventory[0].description = ta.inventory[0].description.replace(                "\nGive " + self.name.upper() + " the " + self.keyObj.name.upper(),                "\nGive " + self.name.upper() + " the " + self.keyObj.name.upper() + ": Completed")            self.status = "completed"            if self.win_give is not None:                ta.inventory.append(self.win_give)            if self.win_take is not None:                ta.inventory.remove(self.win_take)            if self.win_take and self.win_take != questObj:                ta.inventory.remove(questObj)            if self.name == "captain":                print("\n" + self.name.upper() + ": " + self.talk["win"])            if self.win_act is not None:                self.win_act()            return "\n" + self.name.upper() + ": " + self.talk["win"]        else:            return "\n" + self.name.upper() + ": " + self.talk["wrong key"]def cut_off_action(action, arr_given):    ret_str = ""    num = arr_given.index(action)    for x in arr_given[num+1:]:        ret_str = ret_str + x + " "    ret_str = ret_str[:len(ret_str)-1]    return ret_strdef keyEffects(anthem1, anthem2, anthem3, anthem4, shell, exp):    loc.inventory.remove(anthem1)    loc.inventory.remove(anthem2)    loc.inventory.remove(anthem3)    loc.inventory.remove(anthem4)    loc.inventory.remove(shell)    exp()def arr_element_check(list_name, alias, arr_given):    aliasList = alias    for x in list_name:        if x in arr_given:            return x    if aliasList.keys():        for x in aliasList.keys():            if x in arr_given:                return aliasList.get(x)    return Nonedef item_description(list_given, str_check):    des = ""    for x in list_given:        if x.name in str_check:            des = x.description            break    return "\n" + desdef getInv():    print("\ninventory:")    for x in ta.inventory:        print(x.quantity, x.name)def el_arr_name(giv_arr, arr_Type):    s = ""    if giv_arr is not None:        for x in giv_arr:            if arr_Type == "direction":                s = s + " and " + x            elif (arr_Type == "npc" or arr_Type == "item") and (x.visible is True or (x.visible is not False and x.visible())):                s = s + " and " + x.name.upper()            #elif arr_Type != "direction" and arr_Type != "npc":            #    s = s + " and " + x.name.upper()        return s[5:]    return Nonedef look_comm(given_arr, given_str):    #   one worded    if len(given_arr) == 1 and (given_str == "look" or given_str == "look around"):        ret_s = "\n" + loc.name.upper() + "\n" + loc.look.get("description")        if loc.npc and el_arr_name(loc.npc, "npc"):            ret_s = ret_s + " " + el_arr_name(loc.npc, "npc") + " is here."        if loc.inventory and el_arr_name(loc.inventory, "item"):            ret_s = ret_s + " Also, " + el_arr_name(loc.inventory, "item") + " is in the area."        return ret_s    #   look    elif len(given_arr) > 1 and "look" in given_arr:        given_str = cut_off_action("look", given_arr)        given_arr = given_str.split(" ")        if "inventory" in arr_user_inp or "inv" in given_arr or "i" in given_arr:            getInv()            return "inv"        if loc.npc:            for x in loc.npc:                if (x.visible is True or (x.visible is not False and x.visible())) and x.name in given_str:                    return "\n" + x.description        if loc.inventory:            for x in loc.inventory:                if x.name in given_str:                    return "\n" + x.description        n = arr_element_check(cardinal_dir, cardinal_alias, given_arr)        if n is None and ta.inventory:            desc = item_description(ta.inventory, given_str)            if desc != "\n":                return desc            return"\nCouldn't understand past 'look'"        elif n is not None:            if n in loc.look:                s = ""                if n == "down" and  el_arr_name(loc.inventory, "item"):                    s = "On the ground you can see " + el_arr_name(loc.inventory, "item") + "."                return "\n" + loc.look[n] + s            return "\n" + loc.look["default"]def go(given_arr, given_str, t):    is_go = False    if "go" in given_arr:        given_str = cut_off_action("go", given_arr)        given_arr = given_str.split(" ")        is_go = True    n = arr_element_check(cardinal_dir, cardinal_alias, given_arr)    if n is not None:        if n in loc.directions.keys():            nextLoc = loc.directions.get(n)            if nextLoc.blocked is False or (nextLoc.blocked is not True and nextLoc.blocked() is False):                if loc.visited is False:                    loc.setVisited(True)                return nextLoc            print("\n" + nextLoc.blocked_desc)            return None        else:            print("\nYou cannot go in that direction. You can try to go " + el_arr_name(loc.directions, "direction") + ".")            return None    if is_go is True:        if loc.name in given_str or (loc.alias and loc.alias in given_str):            print("\nYou are already here!")            return None        for x in ta.places:            if x.name in given_str or (x.alias and x.alias in given_str):                if x.blocked is False or (x.blocked is not True and x.blocked() is False):                    if x.visited:                        if loc.visited is False:                            loc.setVisited(True)                        return x                    print("\nYou don't know how to get there.")                    return None                print("\n" + x.blocked_desc)                return None        print("\nI could not read past go.")    return Nonedef get_drop( given_str, given_arr, a_from, a_to, command):    if given_str == command:        return "I couldn't understand past '" + command + "'."    arr_from = a_from    arr_to = a_to    given_str = cut_off_action(command, given_arr)    dropped_item = None    if not arr_from:        return "\nThere was nothing to " + command + "."    for x in arr_from:        if x.name in given_str:            if x.visible is False or (x.visible is not True and x.visible() is False):                return "You can't see that."            if (x.fixed_loc is False) or (x.fixed_loc is not True and not x.fixed_loc()):                x.quantity = x.quantity - 1                dropped_item = x                if x.name == "key":                    if x.visible is not True:                        print("\nAs you pick up the key, you hear the Treasureland's anthem ring throught"                              " the forest:\nTreasureland is the place to be\nTreasureland, where the "                              "acorns are free.\nTreasureland is for you and me and\nall the fuzzy "                              "creatures in the world.")                    x.visible = True                if x.quantity == 0:                    arr_from.remove(x)                break            #if x.name == "berries":            #    x.fixed_loc = randint(0, 9) > 6            return x.fixed_loc_desc    if dropped_item is None:        return "I could not understand past '" + command + "'."    if a_to:        for x in a_to:            if x.name == dropped_item.name:                x.quantity = x.quantity + 1                if command == "drop":                    return "dropped " + dropped_item.name + "."                else:                    return "got " + dropped_item.name + "."    arr_to.append(dropped_item)    a_to[len(a_to) - 1].quantity = 1    if command == "drop":        return "dropped " + dropped_item.name + "."    else:        return "got " + dropped_item.name + "."def extraCommCheck(arr_ls, inp):    if arr_ls:        for x in arr_ls:            if (x.visible or (x.visible is not False and x.visible())) and x.extra_commands:                for xx in x.extra_commands:                    if xx.name in inp:                        return xx    return Nonedef extraComCheck(arr_ls, inp, loc):    ls = extraCommCheck(arr_ls, inp)    in_loc = loc    if ls:        if ls.requirements():            thing = None            print("\n" + ls.description)            if ls.action is not None:                thing = ls.action()                if thing is not None:                    return thing            #elif ls.action is not None:            #    in_loc = action(ls.action[0], ls.action[1], ls.action[2])        else:            print("\n" + ls.requirement_fail_desc)        return in_loc    return Nonedef action(loc, inp, arr):    if "inventory" in arr or "inv" in arr or "i" in arr:        getInv()        return loc    noun = extraComCheck(loc.inventory, inp, loc)    if noun is not None:        return noun    else:        noun = extraComCheck(ta.inventory, inp, loc)    if noun is not None:        return noun    elif noun is None and loc.npc:        noun = extraComCheck(loc.npc, inp, loc)    if noun is not None:        return noun    #   Look Commands    elif not noun and "talk" in arr and loc.npc:        for x in loc.npc:            if (x.visible is True or (x.visible is not False and x.visible() is True)) and x.name in inp:                x.question()                return loc            elif loc.npc[len(loc.npc)-1] == x:                print("\nI couldn't read past 'talk'")                return loc    elif not noun and "talk" in arr:        print("\nThere is no one to talk to.")        return loc    elif not noun and "give" in inp and loc.npc:        giveAcc = False        for n in loc.npc:            if (n.visible is True or (n.visible is not False and n.visible() is True)) and n.status == "in progress":                inp = cut_off_action("give", arr)                if ta.inventory:                    for x in ta.inventory:                        if x.name in inp:                            ans = n.checkWinKey(x)                            if n.status == "completed":                                print(ans)                                return loc                            givAcc = True                            if loc.npc[len(loc.npc) -1] == n:                                print(ans)                        elif loc.npc[len(loc.npc) -1] == n and ta.inventory[len(ta.inventory)-1] == x:                            print("\nI couldn't read past 'give'")            elif n.status == "prompt" and loc.npc[len(loc.npc) -1] == n:                print("You have to talk to someone and accept their quest first.")            elif loc.npc[len(loc.npc) -1] == n:                print("I could not read past 'give'")    elif not noun and "give" in arr:        print("\nThere is no one to give anything to.")        return loc    elif not noun and ("look" in arr):        noun = look_comm(arr, inp)        if noun != "inv":            print(noun)            return loc    elif "drop" in arr:        print("\n" + get_drop(inp, arr, ta.inventory, loc.inventory, "drop"))        return loc    elif "get" in arr:        print("\n" + get_drop(inp, arr, loc.inventory, ta.inventory, "get"))        return loc    #   Movement Commands    noun = go(arr, inp, loc)    if noun is not None:        loc = noun        ret_s = ("\n" + loc.name.upper()) + "\n"        if loc.visited is not True:            ret_s = ret_s + loc.look.get("description") + "\n"        if loc.inventory and el_arr_name(loc.inventory, "item"):            ret_s = ret_s + "There is " + el_arr_name(loc.inventory, "item") + " in the area. "        if loc.npc and el_arr_name(loc.npc, "npc"):            ret_s = ret_s + el_arr_name(loc.npc, "npc") + " is here."        print(ret_s)    elif "go" not in arr and "look" not in arr and "get" not in arr and "drop" not in \            arr and "i" not in arr and "inventory" not in arr and "talk" not in arr \            and not arr_element_check(cardinal_dir, cardinal_alias, arr_user_inp) and "give" not in arr:        print("\nI did not recognize that command.")    return locdef help():    print("\nHELP MENU")    print("N,S,E,W, NE, SE, NW, SW = move north, south, east, west, northeast, southeast, northwest, southwest")    print("go [previously visited place] = allows players to jump to a location previously visited")    print("look [name]= examine objects, people, and the environment around you")    print("get = pick up items in the environment")    print("drop = put down items from inventory to the environment")    print("use 'item' = performs the action linked to the item used, (ex: use object = give object to npc)")    print("[look] i, inv, inventory = checks the player's inventory")    print("exit = quit the game")    print("\nNPC's general commands")    print("talk + 'Npc's name' = get the status of the task you may or may not have")    print("give + 'item = give an item to the NPC to see if it's what it wants")    print("*Items and Npcs have special commands that can be used. Try to figure out what they are*")    print("\nShortcuts & Extra Help")    print("N,S,E,W, NE, SE, NW, SW = north, south, east, west, northeast, southeast, northwest, southwest")    print("cove = Mermaid Cove")    print("peak = Heaven's Peak")    print("tower = Leroy's Tower")    print("chasm = The Red Chasm")    print("forest = Treasureland")    print("well = Wish Well")    print("keep = Falcon Keep")    print("'look objective' = will give you a list of current tasks you have based off of npc requests.")if __name__ == '__main__':    cardinal_dir = ["north", "south", "east", "west", "northeast", "southeast", "northwest", "southwest", "up", "down"]    cardinal_alias = {"n": "north", "s": "south", "e": "east", "w": "west", "ne": "northeast",                      "se": "southeast", "nw": "northwest", "sw": "southwest", "north east": "northeast",                      "south east": "southeast", "north west": "northwest", "south west": "southwest"}    user_inp = ""    ta = LeroysQuest()    loc = ta.places[1]    arr_user_inp = []    os.system('cls' if os.name == 'nt' else 'clear')    #   Intro    input("Shipwrecked, you were washed ashore to this island. Fortunately, ships frequently visit the city of Braids. "          "Unfortunately, you have no way to pay any captain for a trip back home. Glum, you sit at Mermaid’s Cove and "          "wish for a miracle.\nPress ENTER to continue.\n>")    input("\nSuddenly, a ghost appears before you.\n>")    input("\nLEROY: Hello, my name is Leroy. I know of a treasure hidden inside of a headstone at Falcon’s Keep. How do"          " I know this? I was the one that hid it. Don’t worry, only treasure is inside of the headstone. If you can "          "find it you can have it.\n\nStunned, you accept his quest.\n>")    input("LEROY: Excellent. There is only one key that can unlock the headstone. I’d tell you where to find the key, "          "but I forgot. However, the directions are written down on a piece of paper somewhere. Therefore, someone "          "must have it on the island… Maybe it was someone from Braids...\n\nAs he is thinking, bird poop drops from "          "the sky and hits LEROY, which causes him to disappear.\n>")    print("\n" + loc.name.upper())    print(loc.look.get("description"))    print("You see ROPE in the area.")    print("type 'exit' to quit or 'help' for help or 'look objective' to look at the current tasks.")    while True:        inp_str = input(">")        org_user_inp = inp_str.lower()        user_inp = re.sub(r" {2,}", " ", org_user_inp)        if user_inp == "exit":            exit()        if user_inp == "help":            help()        else:            org_arr_user_inp = org_user_inp.split(" ")            user_inp = org_user_inp            arr_user_inp = org_arr_user_inp.copy()            loc = action(loc, user_inp, arr_user_inp)